{"version":3,"sources":["HelperFunctions/dispatchHandler.js","HelperFunctions/colors.js","Algorithms/BubbleSort.js","Algorithms/HeapSort.js","Algorithms/InsertionSort.js","Algorithms/MergeSort.js","Algorithms/QuickSort.js","Algorithms/RadixSort.js","Algorithms/SelectionSort.js","HelperFunctions/randomArray.js","Redux/actionTypes.js","Components/NavBar.js","Redux/actions.js","Components/Body.js","Containers/BodyContainer.js","Components/Card.js","images/bubblesortchart.png","images/bubblesortgif.gif","images/heapsortchart.png","images/heapsortgif.gif","images/insertionsortchart.png","images/insertionsortgif.gif","images/mergesortchart.png","images/mergesortgif.gif","images/quicksortchart.png","images/quicksortgif.gif","images/radixsortchart.png","images/radixsortimg.jpeg","images/selectionsortchart.png","images/selectionsortgif.gif","images/spacetimecomplexity.png","Containers/InfoPageContainer.js","App.js","Redux/rootReducer.js","index.js"],"names":["dispatchHandler","animationArray","props","length","currentPane","shift","changeBarColor","changeBarHeight","buildBuckets","clearBuckets","setTimeout","speed","dispatchSetFinishedSorting","SORTED_COLOR","INITIAL_COLOR","PIVOT_COLOR","COMPARE_COLOR","BubbleSort","localArray","randomArray","i","isSorted","j","push","temp","temp2","k","HeapSort","tempArray","currentIndex","Math","floor","heapify","buildMaxHeap","lastNode","sortMaxHeap","array","start","end","swap","left","right","InsertionSort","jWhile","MergeSort","auxArray","mergeSortRecursion","markSorted","middle","isFinalMerge","console","log","merge","QuickSort","quickSortHelper","pivot","RadixSort","num","place","turns","max","number","toString","findMax","buckets","Array","from","position","abs","pow","localArrayPosition","concat","times","l","SelectionSort","min","randomizeArray","arrayLength","ceil","random","generateColorArray","arrayColor","SET_RANDOM_ARRAY","SORTED_ARRAY","IS_SORTING","FINISHED_SORTING","CHANGE_BAR_HEIGHT","CHANGE_BAR_COLOR","SET_COLOR_ARRAY","STYLE","METHOD","SPEED","BUCKETS","CLEAR_BUCKET","ON_INFO","OFF_INFO","NavBar","state","styleSwapHandler","e","currentStyle","style","dispatchStyleSwap","arrayLengthHandler","setState","target","value","newArrayHandler","dispatchMethod","dispatchRandomArray","dispatchSetOffInfo","dispatchColorArray","dispatchSpeed","sortHandler","dispatchSetIsSorting","method","setSortingMethod","handleOnInfo","dispatchSetOnInfo","this","class","backgroundColor","className","id","action","type","onChange","isSorting","onClick","to","onInfo","display","href","React","Component","connect","sortedArray","dispatch","payload","setRandomArray","dispatchSortedArray","setSortedArray","newHeight","index","newColor","styleType","swapStyles","colorArray","setColorArray","methodType","setMethod","bucket","height","Body","radixBars","workingBuckets","bucketsArray","allBuckets","arraySize","verticalAlign","margin","width","borderRadius","border","arrayBars","newArray","map","marginTop","justifyContent","alignItems","sorted","BodyContainer","Card","src","cardObj","coverImage","name","description","chartImage","InfoPageContainer","cardObjects","bubbleSort","bubbleChart","insertionSort","insertionChart","selectionSort","selectionChart","quickSort","quickChart","heapSort","heapChart","mergeSort","mergeChart","radixSort","radixChart","spaceTimeComplexityGraph","arrayOfCards","card","App","path","component","defaultState","bucketsColor","rootReducer","combineReducers","prevState","newArr","newBuckets","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.272b6df5.chunk.js","sourcesContent":["\nexport function dispatchHandler(animationArray, props) {\n  if (animationArray.length === 0) {\n    props.dispatchSetFinishedSorting()\n    return\n  }\n\n  let currentPane = animationArray.shift()\n\n  let dispatchFunction =\n    currentPane[0] === \"color\"\n      ? props.changeBarColor\n      : currentPane[0] === \"height\"\n        ? props.changeBarHeight\n        : currentPane[0] === \"bucket\"\n          ? props.buildBuckets\n          : currentPane[0] === \"clear\"\n            ? props.clearBuckets :\n            null\n\n  dispatchFunction(currentPane[1], currentPane[2])\n  setTimeout(\n    () => dispatchHandler(animationArray, props),\n    props.speed\n  )\n}\n\n// function msp(state){\n//   return{\n//     isSorting: state.isSorting\n//   }\n// }\n\n// export default connect(msp)(dispatchHandler)","export const SORTED_COLOR = \"#545f66ff\" //black-coral\nexport const INITIAL_COLOR = \"#829399ff\" //cadet-grey\nexport const PIVOT_COLOR = \"pink\" //light-cyan \"#d0f4eaff\"\nexport const FADED_COLOR = \"pink\" //tea-green \"#e8fcc2ff\"\nexport const COMPARE_COLOR = \"#b1cc74ff\" //middle-green-yellow\nexport const NAVBAR_COLOR = \"#477890ff\" //french blue\nexport const MAIN_COLOR = \"#f8ffe5ff\"\n\n// french #89bbfeff\n\n// palette 2\n// --beau-blue: #cae5ffff;\n// --non-photo-blue: #acedffff;\n// --french-sky-blue: #89bbfeff;\n// --glaucous: #6f8ab7ff;\n// --independence: #615d6cff;\n\n// palette 1\n// --black-coral: #545f66ff;\n// --cadet-grey: #829399ff;\n// --light-cyan: #d0f4eaff;\n// --tea-green: #e8fcc2ff;\n// --middle-green-yellow: #b1cc74ff;\n\n// 3, 25, 38","import { dispatchHandler } from '../HelperFunctions/dispatchHandler'\nimport { SORTED_COLOR, INITIAL_COLOR, COMPARE_COLOR} from '../HelperFunctions/colors'\n\nexport function BubbleSort(props) {\n  let animationArray = []\n  let localArray = [...props.randomArray]\n\n  for (let i = 0; i < localArray.length; i++) {\n    let isSorted = true\n    for (let j = 0; j < localArray.length - i; j++) {\n      animationArray.push([\"color\", COMPARE_COLOR, j])\n      animationArray.push([\"color\", COMPARE_COLOR, j + 1])\n\n      if (localArray[j] > localArray[j + 1]) {\n        let temp = localArray[j]\n        let temp2 = localArray[j + 1]\n        localArray[j] = temp2\n        localArray[j + 1] = temp\n        animationArray.push([\"height\", temp2, j])\n        animationArray.push([\"height\", temp, j + 1])\n        isSorted = false\n      }\n\n      animationArray.push([\"color\", INITIAL_COLOR, j])\n      animationArray.push([\"color\", INITIAL_COLOR, j + 1])\n    }\n    animationArray.push([\"color\", SORTED_COLOR, localArray.length - 1 - i])\n    animationArray.push([\"color\", SORTED_COLOR, localArray.length - i])\n    if (isSorted === true) {\n      for (let k = 0; k < i; k++) {\n        animationArray.push([\"color\", SORTED_COLOR, k])\n      }\n      break\n    }\n  }\n\n  dispatchHandler(animationArray, props)\n}","import { dispatchHandler } from '../HelperFunctions/dispatchHandler'\nimport { SORTED_COLOR, INITIAL_COLOR, COMPARE_COLOR } from '../HelperFunctions/colors'\n\nfunction HeapSort(props) {\n  let tempArray = [...props.randomArray]\n  let animationArray = []\n\n  buildMaxHeap(tempArray, animationArray)\n\n  let lastNode = tempArray.length - 1\n  while (lastNode > 0) {\n    sortMaxHeap(tempArray, lastNode, animationArray)\n    lastNode--\n  }\n  animationArray.push([\"color\", SORTED_COLOR, 0])\n\n  dispatchHandler(animationArray, props)\n} //HeapSort\n\nfunction sortMaxHeap(tempArray, lastNode, animationArray) {\n  let temp = tempArray[lastNode]\n  let temp2 = tempArray[0]\n  tempArray[lastNode] = tempArray[0]\n  tempArray[0] = temp\n\n  animationArray.push([\"color\", COMPARE_COLOR, 0])\n  animationArray.push([\"color\", COMPARE_COLOR, lastNode])\n  animationArray.push([\"height\", temp, 0])\n  animationArray.push([\"height\", temp2, lastNode])\n  animationArray.push([\"color\", SORTED_COLOR, lastNode])\n\n  heapify(tempArray, 0, lastNode, animationArray)\n}\n\nfunction buildMaxHeap(tempArray, animationArray) {\n  let currentIndex = Math.floor(tempArray.length / 2)\n  while (currentIndex >= 0) {\n    heapify(tempArray, currentIndex, tempArray.length, animationArray)\n    currentIndex--\n  }\n}\n\nfunction heapify(array, start, end, animationArray) {\n  let left = start * 2 + 1\n  let right = start * 2 + 2 < end ? start * 2 + 2 : null\n  let swap\n\n  if (start >= Math.floor(end / 2)) {\n    return\n  }\n\n  if (right) {\n    swap = array[left] > array[right] ? left : right\n  } else {\n    swap = left\n  }\n\n  if (array[swap] > array[start]) {\n    let temp = array[swap]\n    let temp2 = array[start]\n    array[swap] = array[start]\n    array[start] = temp\n\n    animationArray.push([\"color\", COMPARE_COLOR, swap])\n    animationArray.push([\"color\", COMPARE_COLOR, start])\n    animationArray.push([\"height\", temp, start])\n    animationArray.push([\"height\", temp2, swap])\n    animationArray.push([\"color\", INITIAL_COLOR, swap])\n    animationArray.push([\"color\", INITIAL_COLOR, start])\n\n    heapify(array, swap, end, animationArray)\n  } else {\n    animationArray.push([\"color\", INITIAL_COLOR, start])\n    animationArray.push([\"color\", INITIAL_COLOR, left])\n  }\n}\n\nexport { HeapSort }\n","import { dispatchHandler } from '../HelperFunctions/dispatchHandler'\nimport { SORTED_COLOR, INITIAL_COLOR, COMPARE_COLOR } from '../HelperFunctions/colors'\n\nexport function InsertionSort(props) {\n  let tempArray = [...props.randomArray]\n  let animationArray = []\n\n  for (let i = 1; i < tempArray.length; i++) {\n    let temp = tempArray[i]\n    let j = i - 1\n    let jWhile = 0\n\n    animationArray.push([\"color\", COMPARE_COLOR, i])\n    animationArray.push([\"color\", COMPARE_COLOR, j])\n\n    while (j >= 0 && temp < tempArray[j]) {\n      let swap = tempArray[j]\n      tempArray[j] = temp\n      tempArray[j + 1] = swap\n      jWhile++\n\n      animationArray.push([\"height\", temp, j])\n      animationArray.push([\"height\", swap, j + 1])\n      animationArray.push([\"color\", INITIAL_COLOR, j + 1])\n      j - 1 >= 0\n        ? animationArray.push([\"color\", COMPARE_COLOR, j - 1])\n        : animationArray.push([\"color\", INITIAL_COLOR, j])\n\n      if (temp >= tempArray[j - 1]) {\n        animationArray.push([\"color\", INITIAL_COLOR, j])\n        animationArray.push([\"color\", INITIAL_COLOR, j - 1])\n      }\n      j--\n    }\n\n    if (jWhile === 0) {\n      animationArray.push([\"color\", INITIAL_COLOR, j + 1])\n      animationArray.push([\"color\", INITIAL_COLOR, j])\n    }\n  }\n\n  for (let i = 0; i < tempArray.length; i++) {\n    animationArray.push([\"color\", SORTED_COLOR, i])\n  }\n\n  dispatchHandler(animationArray, props)\n}","import {\n  COMPARE_COLOR,\n  INITIAL_COLOR,\n  SORTED_COLOR,\n} from \"../HelperFunctions/colors\"\nimport { dispatchHandler } from \"../HelperFunctions/dispatchHandler\"\n\nexport function MergeSort(props) {\n  let animationArray = []\n  let localArray = [...props.randomArray]\n  let auxArray = [...props.randomArray]\n  if (localArray.length <= 1) return localArray\n  mergeSortRecursion(\n    localArray,\n    0,\n    localArray.length - 1,\n    auxArray,\n    animationArray\n  )\n  markSorted(localArray, animationArray)\n  dispatchHandler(animationArray, props)\n}\n\nfunction mergeSortRecursion(localArray, start, end, auxArray, animationArray) {\n  if (start === end) return\n  const middle = Math.floor((start + end) / 2)\n  mergeSortRecursion(auxArray, start, middle, localArray, animationArray)\n\n  mergeSortRecursion(auxArray, middle + 1, end, localArray, animationArray)\n\n  let isFinalMerge = false\n\n  if (end - start + 1 === localArray.length) {\n    isFinalMerge = true\n  }\n\n\n  return merge(\n    localArray,\n    start,\n    middle,\n    end,\n    auxArray,\n    animationArray,\n    isFinalMerge\n  )\n}\n\nfunction merge(\n  localArray,\n  start,\n  middle,\n  end,\n  auxArray,\n  animationArray,\n  isFinalMerge\n) {\n  console.log(\"final merge? \", isFinalMerge)\n  let k = start\n  let i = start\n  let j = middle + 1\n  console.log(\"i-k-j-middle \", i, k, j, middle)\n  while (i <= middle && j <= end) {\n    console.log(\"first while:\", i, k, j, middle, isFinalMerge )\n    animationArray.push([\"color\", COMPARE_COLOR, i])\n    animationArray.push([\"color\", COMPARE_COLOR, j])\n\n    // animationArray.push([\"color\", INITIAL_COLOR, i])\n    // animationArray.push([\"color\", INITIAL_COLOR, j])\n\n\n    if (auxArray[i] <= auxArray[j]) {\n      console.log(\"in first cond\", k)\n      animationArray.push([\"height\", auxArray[i], k])\n      \n      animationArray.push([\"color\", INITIAL_COLOR, i])\n      animationArray.push([\"color\", INITIAL_COLOR, j])\n      \n      if (isFinalMerge) {\n        animationArray.push([\"color\", SORTED_COLOR, i])\n      }\n      localArray[k++] = auxArray[i++]\n    } else {\n      console.log('in else cond', k)\n      animationArray.push([\"height\", auxArray[j], k])\n\n      animationArray.push([\"color\", INITIAL_COLOR, i])\n      animationArray.push([\"color\", INITIAL_COLOR, j])\n      \n\n      if (isFinalMerge) {\n        animationArray.push([\"color\", SORTED_COLOR, k])\n      }\n      localArray[k++] = auxArray[j++]\n    }\n  }\n\n  while (i <= middle) {\n    console.log(\"second while\", i,j,k,middle, end)\n    animationArray.push([\"color\", COMPARE_COLOR, i])\n    if (isFinalMerge) {\n      animationArray.push([\"color\", SORTED_COLOR, i])\n    } else {\n      animationArray.push([\"color\", INITIAL_COLOR, i])\n    }\n    animationArray.push([\"height\", auxArray[i], k])\n    localArray[k++] = auxArray[i++]\n  }\n\n  while (j <= end) {\n    console.log(\"third while\", i,j,k,middle, end)\n    animationArray.push([\"color\", COMPARE_COLOR, j])\n\n    if (isFinalMerge) {\n      animationArray.push([\"color\", SORTED_COLOR, k])\n    } else {\n      animationArray.push([\"color\", INITIAL_COLOR, j])\n    }\n    animationArray.push([\"height\", auxArray[j], k])\n    localArray[k++] = auxArray[j++]\n  }\n\n  return localArray\n}\n\nfunction markSorted(array, animationArray) {\n  for (let i = 0; i < array.length; i++) {\n    animationArray.push([\"color\", SORTED_COLOR, i])\n  }\n}\n","import { dispatchHandler } from '../HelperFunctions/dispatchHandler'\nimport { SORTED_COLOR, INITIAL_COLOR, PIVOT_COLOR, COMPARE_COLOR } from '../HelperFunctions/colors'\n\nexport function QuickSort(props) {\n  let array = [...props.randomArray]\n  let animationArray = []\n\n  quickSortHelper(array, 0, array.length - 1, animationArray)\n  dispatchHandler(animationArray, props)\n}\n\nfunction quickSortHelper(array, start, end, animationArray) {\n  if (start >= end) {\n    animationArray.push([\"color\", SORTED_COLOR, start])\n    return\n  }\n  let pivot = start,\n    left = start + 1,\n    right = end\n\n  animationArray.push([\"color\", PIVOT_COLOR, pivot])\n \n  while (right >= left) {\n    if (array[right] < array[pivot] && array[left] > array[pivot]) {\n      animationArray.push([\"color\", COMPARE_COLOR, left])\n      animationArray.push([\"color\", COMPARE_COLOR, right])\n      let temp = array[right]\n      animationArray.push([\"height\", array[left], right])\n      animationArray.push([\"height\", temp, left])\n      array[right] = array[left]\n      array[left] = temp\n      animationArray.push([\"color\", INITIAL_COLOR, left])\n      animationArray.push([\"color\", INITIAL_COLOR, right])\n    }\n    if (array[right] >= array[pivot]) {\n      right--\n    }\n    if (array[left] <= array[pivot]) {\n      left++\n    }\n  }\n\n  if (pivot !== right) {\n    let temp = array[right]\n    animationArray.push([\"height\", array[pivot], right])\n    animationArray.push([\"height\", temp, pivot])\n\n    array[right] = array[pivot]\n    array[pivot] = temp\n\n    animationArray.push([\"color\", INITIAL_COLOR, pivot])\n    animationArray.push([\"color\", INITIAL_COLOR, right])\n  }\n\n  animationArray.push([\"color\", SORTED_COLOR, left])\n  animationArray.push([\"color\", SORTED_COLOR, right])\n  \n  quickSortHelper(array, start, right - 1, animationArray)\n  quickSortHelper(array, right + 1, end, animationArray)\n}\n","import { dispatchHandler } from '../HelperFunctions/dispatchHandler'\nimport { SORTED_COLOR, INITIAL_COLOR, FADED_COLOR } from '../HelperFunctions/colors'\n\nexport function RadixSort(props) {\n  let localArray = [...props.randomArray]\n  let animationArray = []\n\n  let turns = findMax(localArray)\n\n  for (let i = 0; i < turns; i++) {\n    let buckets = Array.from({ length: 10 }, () => [])\n    for (let j = 0; j < localArray.length; j++) {\n      let position = getPosition(localArray[j], i)\n      buckets[position].push(localArray[j])\n      animationArray.push([\"color\", FADED_COLOR, j])\n      animationArray.push([\"bucket\", position, localArray[j]])\n    }\n\n    let localArrayPosition = 0\n    localArray = [].concat(...buckets)\n\n    for (let k = 0; k < buckets.length; k++) {\n      if (buckets[k].length) {\n        let times = buckets[k].length\n        for (let l = 0; l < times; l++) {\n          animationArray.push([\"clear\", k, 0])\n          animationArray.push([\"height\", buckets[k][l], localArrayPosition])\n          if (i === turns - 1) {\n            animationArray.push([\"color\", SORTED_COLOR, localArrayPosition])\n          } else {\n            animationArray.push([\"color\", INITIAL_COLOR, localArrayPosition])\n          }\n          localArrayPosition++\n        }\n      }\n    }\n  }\n\n  dispatchHandler(animationArray, props)\n}\n\nfunction findMax(array) {\n  let max = 0\n  for (let number of array) {\n    if (max < number.toString().length) {\n      max = number.toString().length\n    }\n  }\n  return max\n}\n\nfunction getPosition(num, place) {\n  return Math.floor(Math.abs(num) / Math.pow(10, place)) % 10\n}","import { dispatchHandler } from '../HelperFunctions/dispatchHandler'\nimport { SORTED_COLOR, INITIAL_COLOR, PIVOT_COLOR, COMPARE_COLOR } from '../HelperFunctions/colors'\n\n\nexport function SelectionSort(props) {\n  let animationArray = []\n  let localArray = [...props.randomArray]\n  for (let i = 0; i < localArray.length; i++) {\n    let min = i\n    for (let j = i + 1; j < localArray.length; j++) {\n      animationArray.push([\"color\", COMPARE_COLOR, j])\n      animationArray.push([\"color\", PIVOT_COLOR, min])\n      if (localArray[j] < localArray[min]) {\n        animationArray.push([\"color\", INITIAL_COLOR, min])\n        min = j\n      } else {\n        animationArray.push([\"color\", INITIAL_COLOR, j])\n      }\n    }\n    if (min !== i) {\n      animationArray.push([\"color\", COMPARE_COLOR, i])\n      animationArray.push([\"height\", localArray[min], i])\n      animationArray.push([\"height\", localArray[i], min])\n      ;[localArray[i], localArray[min]] = [localArray[min], localArray[i]]\n    }\n    animationArray.push([\"color\", SORTED_COLOR, i])\n    if (min !== i) {\n      animationArray.push([\"color\", INITIAL_COLOR, min])\n    }\n  }\n  dispatchHandler(animationArray, props)\n}\n","const getRandomInt = (min, max) => {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nconst randomizeArray = (arrayLength) => {\n  let array = []\n  for (let i = 0; i < arrayLength; i++) {\n    array.push(getRandomInt(20, 400))\n  }\n  return array\n}\n\nconst generateColorArray = (arrayLength, arrayColor) => {\n  let array = []\n  for (let i = 0; i < arrayLength; i++) {\n    array.push(arrayColor)\n  }\n  return array\n}\n\nexport { randomizeArray, generateColorArray }\n","export const SET_RANDOM_ARRAY = \"SET_RANDOM_ARRAY\"\nexport const SORTED_ARRAY = \"SORTED_ARRAY\"\nexport const IS_SORTING = \"IS_SORTED\"\nexport const FINISHED_SORTING = \"FINISHED_SORTING\"\nexport const CHANGE_BAR_HEIGHT = \"CHANGE_BAR_HEIGHT\"\nexport const CHANGE_BAR_COLOR = \"CHANGE_BAR_COLOR\"\nexport const SET_COLOR_ARRAY = \"SET_COLOR_ARRAY\"\nexport const STYLE = \"STYLE\"\nexport const METHOD = \"METHOD\"\nexport const SPEED = \"SPEED\"\nexport const BUCKETS = \"BUCKETS\"\nexport const CLEAR_BUCKET = \"CLEAR_BUCKETS\"\nexport const ON_INFO = \"ON_INFO\"\nexport const OFF_INFO = \"OFF_INFO\"\n","import React from \"react\"\nimport { connect } from \"react-redux\"\nimport { NavLink } from \"react-router-dom\"\nimport { BubbleSort } from \"../Algorithms/BubbleSort\"\nimport { HeapSort } from \"../Algorithms/HeapSort\"\nimport { InsertionSort } from \"../Algorithms/InsertionSort\"\nimport { MergeSort } from \"../Algorithms/MergeSort\"\nimport { QuickSort } from \"../Algorithms/QuickSort\"\nimport { RadixSort } from \"../Algorithms/RadixSort\"\nimport { SelectionSort } from \"../Algorithms/SelectionSort\"\nimport { INITIAL_COLOR, NAVBAR_COLOR } from \"../HelperFunctions/colors\"\nimport {\n  generateColorArray,\n  randomizeArray,\n} from \"../HelperFunctions/randomArray\"\nimport {\n  buildBuckets,\n  changeBarColor,\n  changeBarHeight,\n  clearBuckets,\n  setColorArray,\n  setFinishedSorting,\n  setIsSorting,\n  setMethod,\n  setOffInfo,\n  setOnInfo,\n  setRandomArray,\n  setSortedArray,\n  setSpeed,\n  swapStyles,\n} from \"../Redux/actions\"\n\nclass NavBar extends React.Component {\n  state = {\n    arrayLength: 50,\n  }\n\n  styleSwapHandler = (e) => {\n    let currentStyle = this.props.style\n    switch (currentStyle) {\n      case \"bars\":\n        return this.props.dispatchStyleSwap(\"gradient\")\n      case \"gradient\":\n        return this.props.dispatchStyleSwap(\"bars\")\n      default:\n        return this.props.dispatchStyleSwap(currentStyle)\n    }\n  }\n\n  componentDidMount() {\n    this.newArrayHandler()\n  }\n\n  arrayLengthHandler = (e) => {\n    this.setState({ arrayLength: e.target.value }, this.newArrayHandler)\n    this.props.dispatchMethod(null)\n  }\n\n  newArrayHandler = () => {\n    this.props.dispatchRandomArray(randomizeArray(this.state.arrayLength))\n    this.props.dispatchSetOffInfo()\n    this.props.dispatchColorArray(\n      generateColorArray(this.state.arrayLength, INITIAL_COLOR)\n    )\n    this.props.dispatchMethod(null)\n    if (this.state.arrayLength < 30 && this.state.arrayLength > 15) {\n      this.props.dispatchSpeed(50)\n    } else if (this.state.arrayLength > 60) {\n      this.props.dispatchSpeed(5)\n    } else if (this.state.arrayLength < 16) {\n      this.props.dispatchSpeed(250)\n    } else {\n      this.props.dispatchSpeed(30)\n    }\n  }\n\n  sortHandler = () => {\n    this.props.dispatchSetOffInfo()\n    this.props.dispatchSetIsSorting()\n    let currentMethod = this.props.method\n    switch (currentMethod) {\n      case \"bubble\":\n        return BubbleSort(this.props)\n      case \"heap\":\n        return HeapSort(this.props)\n      case \"insertion\":\n        return InsertionSort(this.props)\n      case \"quick\":\n        return QuickSort(this.props)\n      case \"selection\":\n        return SelectionSort(this.props)\n      case \"merge\":\n        return MergeSort(this.props)\n      case \"radix\":\n        return RadixSort(this.props)\n      default:\n        return QuickSort(this.props)\n    }\n  }\n  setSortingMethod = (method) => {\n    this.props.dispatchMethod(method)\n    this.props.dispatchSetOffInfo()\n  }\n\n  handleOnInfo = () => {\n    this.props.dispatchSetOnInfo()\n  }\n\n  render() {\n    return (\n      <>\n        <nav\n          class=\"nav-extended\"\n          style={{ backgroundColor: `${NAVBAR_COLOR}` }}\n        >\n          <div className=\"nav-wrapper\">\n            <div className=\"brand-logo right\">Sorting Algorithm Visualizer</div>\n            <ul id=\"nav-mobile\" className=\"left hide-on-med-and-down\">\n              <li>Set Array Size: </li>\n\n              <li>\n                <form action=\"#\">\n                  <div className=\"range-field\">\n                    <input\n                      type=\"range\"\n                      id=\"test5\"\n                      min=\"10\"\n                      max=\"100\"\n                      onChange={\n                        this.props.isSorting ? null : this.arrayLengthHandler\n                      }\n                    />\n                  </div>\n                </form>\n              </li>\n              <li>\n                <div class=\"switch\">\n                  <label>\n                    <input type=\"checkbox\" />\n                    <span onClick={this.styleSwapHandler} class=\"lever\"></span>\n                  </label>\n                </div>\n              </li>\n              <li>\n                <NavLink to=\"/sorting-visualizer\">\n                  <div\n                    onClick={this.props.isSorting ? null : this.newArrayHandler}\n                  >\n                    Generate New Array\n                  </div>\n                </NavLink>\n              </li>\n              <li>\n                <NavLink to=\"/sorting-visualizer\">\n                  {this.props.method ?\n                    <div\n                      onClick={this.props.isSorting ? null : this.sortHandler}\n                      style={\n                        this.props.onInfo\n                          ? { display: \"none\" }\n                          : { display: \"block\" }\n                      }\n                    >\n                      Sort!\n                  </div>\n                    : null}\n                </NavLink>\n              </li>\n            </ul>\n          </div>\n          <div className=\"nav-content\">\n            <ul className=\"tabs tabs-transparent\">\n              <li className=\"tab\">\n                <NavLink to=\"/sorting-visualizer\">\n                  <div\n                    onClick={\n                      this.props.isSorting\n                        ? null\n                        : () => this.setSortingMethod(\"bubble\")\n                    }\n                    className={this.props.method === \"bubble\" ? \"active\" : null}\n                  >\n                    Bubble Sort\n                  </div>\n                </NavLink>\n              </li>\n              <li className=\"tab\">\n                <NavLink to=\"/sorting-visualizer\">\n                  <div\n                    onClick={\n                      this.props.isSorting\n                        ? null\n                        : () => this.setSortingMethod(\"insertion\")\n                    }\n                    className={\n                      this.props.method === \"insertion\" ? \"active\" : null\n                    }\n                  >\n                    Insertion Sort\n                  </div>\n                </NavLink>\n              </li>\n              <li className=\"tab\">\n                <NavLink to=\"/sorting-visualizer\">\n                  <div\n                    onClick={\n                      this.props.isSorting\n                        ? null\n                        : () => this.setSortingMethod(\"selection\")\n                    }\n                    className={\n                      this.props.method === \"selection\" ? \"active\" : null\n                    }\n                  >\n                    Selection Sort\n                  </div>\n                </NavLink>\n              </li>\n              <li className=\"tab\">\n                <NavLink to=\"/sorting-visualizer\">\n                  <div\n                    onClick={\n                      this.props.isSorting\n                        ? null\n                        : () => this.setSortingMethod(\"quick\")\n                    }\n                    className={this.props.method === \"quick\" ? \"active\" : null}\n                  >\n                    Quick Sort\n                  </div>\n                </NavLink>\n              </li>\n              <li className=\"tab\">\n                <NavLink to=\"/sorting-visualizer\">\n                  <div\n                    onClick={\n                      this.props.isSorting\n                        ? null\n                        : () => this.setSortingMethod(\"heap\")\n                    }\n                    className={this.props.method === \"heap\" ? \"active\" : null}\n                  >\n                    Heap Sort\n                  </div>\n                </NavLink>\n              </li>\n              <li className=\"tab\">\n                <NavLink to=\"/sorting-visualizer\">\n                  <div\n                    onClick={\n                      this.props.isSorting\n                        ? null\n                        : () => this.setSortingMethod(\"merge\")\n                    }\n                    className={this.props.method === \"merge\" ? \"active\" : null}\n                  >\n                    Merge Sort\n                  </div>\n                </NavLink>\n              </li>\n              <li className=\"tab\">\n                <NavLink to=\"/sorting-visualizer\">\n                  <div\n                    onClick={\n                      this.props.isSorting\n                        ? null\n                        : () => this.setSortingMethod(\"radix\")\n                    }\n                    className={this.props.method === \"radix\" ? \"active\" : null}\n                  >\n                    Radix\n                  </div>\n                </NavLink>\n              </li>\n              <li class=\"hide-on-med-and-down tab\">\n                <NavLink to=\"/sorting-visualizer/info\">\n                  <div onClick={this.props.onInfo ? null : this.handleOnInfo}>\n                    Algorithm Info\n                  </div>\n                </NavLink>\n              </li>\n              <li class=\"right hide-on-med-and-down tab\">\n                <a href=\"https://mkoenke.github.io/pathfinding-visualizer/\">\n                  <div>\n                    Pathfinding Algorithm Visualizer\n                  </div>\n                </a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n      </>\n    )\n  }\n}\n\nfunction msp(state) {\n  return {\n    isSorting: state.isSorting,\n    randomArray: state.randomArray,\n    sortedArray: state.sortedArray,\n    style: state.style,\n    method: state.method,\n    speed: state.speed,\n    onInfo: state.onInfo,\n  }\n}\n\nfunction mdp(dispatch) {\n  return {\n    dispatchRandomArray: (randomArray) => dispatch(setRandomArray(randomArray)),\n    dispatchSortedArray: (sortedArray) => dispatch(setSortedArray(sortedArray)),\n    dispatchSetIsSorting: () => dispatch(setIsSorting()),\n    dispatchSetFinishedSorting: () => dispatch(setFinishedSorting()),\n    changeBarHeight: (newHeight, index) =>\n      dispatch(changeBarHeight(newHeight, index)),\n    changeBarColor: (newColor, index) =>\n      dispatch(changeBarColor(newColor, index)),\n    dispatchStyleSwap: (styleType) => dispatch(swapStyles(styleType)),\n    dispatchColorArray: (colorArray) => dispatch(setColorArray(colorArray)),\n    dispatchMethod: (methodType) => dispatch(setMethod(methodType)),\n    dispatchSpeed: (speed) => dispatch(setSpeed(speed)),\n    buildBuckets: (bucket, height) => dispatch(buildBuckets(bucket, height)),\n    clearBuckets: (bucket) => dispatch(clearBuckets(bucket)),\n    dispatchSetOnInfo: () => dispatch(setOnInfo()),\n    dispatchSetOffInfo: () => dispatch(setOffInfo()),\n  }\n}\n\nexport default connect(msp, mdp)(NavBar)\n","import {\n  BUCKETS,\n  CHANGE_BAR_COLOR,\n  CHANGE_BAR_HEIGHT,\n  CLEAR_BUCKET,\n  FINISHED_SORTING,\n  IS_SORTING,\n  METHOD,\n  OFF_INFO,\n  ON_INFO,\n  SET_COLOR_ARRAY,\n  SET_RANDOM_ARRAY,\n  SORTED_ARRAY,\n  SPEED,\n  STYLE,\n} from \"./actionTypes\"\n\nexport function setSpeed(value) {\n  return { type: SPEED, payload: value }\n}\n\nexport function setRandomArray(randomArray) {\n  return { type: SET_RANDOM_ARRAY, payload: randomArray }\n}\n\nexport function setSortedArray(sortedArray) {\n  return { type: SORTED_ARRAY, payload: sortedArray }\n}\n\nexport function setOnInfo() {\n  return { type: ON_INFO, payload: true }\n}\n\nexport function setOffInfo() {\n  return { type: OFF_INFO, payload: false }\n}\n\nexport function setIsSorting() {\n  return { type: IS_SORTING, payload: true }\n}\n\nexport function setFinishedSorting() {\n  return { type: FINISHED_SORTING, payload: false }\n}\n\nexport const changeBarHeight = (newHeight, index) => {\n  return {\n    type: CHANGE_BAR_HEIGHT,\n    newHeight: newHeight,\n    index: index,\n  }\n}\n\nexport const changeBarColor = (newColor, index) => {\n  return {\n    type: CHANGE_BAR_COLOR,\n    newColor: newColor,\n    index: index,\n  }\n}\n\nexport function swapStyles(styleType) {\n  return { type: STYLE, payload: styleType }\n}\n\nexport function setColorArray(colorArray) {\n  return { type: SET_COLOR_ARRAY, payload: colorArray }\n}\n\nexport function setMethod(methodType) {\n  return { type: METHOD, payload: methodType }\n}\n\nexport function buildBuckets(bucket, height) {\n  return {\n    type: BUCKETS,\n    bucket: bucket,\n    height: height\n  }\n}\n\nexport function clearBuckets(bucket) {\n  return { type: CLEAR_BUCKET, bucket: bucket }\n}\n","import React from \"react\"\nimport { connect } from \"react-redux\"\nimport { INITIAL_COLOR, SORTED_COLOR, PIVOT_COLOR } from \"../HelperFunctions/colors\"\n\nclass Body extends React.Component {\n  radixBars = () => {\n    let workingBuckets = [...this.props.bucketsArray]\n    let allBuckets = []\n    let arraySize = this.props.randomArray.length\n\n    switch (this.props.style) {\n      case \"bars\":\n        for (let i = 0; i < workingBuckets.length; i++) {\n          let bucket = []\n          for (let j = 0; j < workingBuckets[i].length; j++) {\n            bucket.push(\n              <div\n                style={{\n                  display: \"inline-block\",\n                  verticalAlign: \"top\",\n                  // margin: `${200 / arraySize}px`,\n                  margin: `2px`,\n                  backgroundColor: INITIAL_COLOR,\n                  height: `${workingBuckets[i][j]}px`,\n                  width: `${600 / arraySize}px`,\n                  borderRadius: \"3px\",\n                }}\n              ></div>\n            )\n          }\n          allBuckets.push(\n            <div className=\"col\">\n              <div style={{ display: \"inline-block\", margin: \"2px\", border: `3px solid ${SORTED_COLOR}`, borderRadius: \"3px\"}}>\n                {bucket}\n              </div>\n            </div>\n          )\n        }\n        return allBuckets\n      case \"gradient\":\n        for (let i = 0; i < workingBuckets.length; i++) {\n          let bucket = []\n          for (let j = 0; j < workingBuckets[i].length; j++) {\n            bucket.push(\n              <div\n                style={{\n                  display: \"inline-block\",\n                  backgroundColor: `rgba(3,9,9,${workingBuckets[i][j] / 400.0 })`,\n                  height: `400px`,\n                  width: `${600 / arraySize}px`,\n                  borderRadius: \"3px\",\n                  margin: \"2px\"\n                }}\n              ></div>\n            )\n          }\n          allBuckets.push(\n            <div className=\"col\">\n              <div style={{ display: \"inline-block\", margin: \"2px\", border: `3px solid ${PIVOT_COLOR}`, borderRadius: \"3px\"}}>\n                {bucket}\n              </div>\n            </div>\n          )\n        }\n        return allBuckets\n    }\n  }//radixBars\n\n  arrayBars = (array) => {\n    switch (this.props.style) {\n      case \"bars\":\n        let newArray = []\n        for (let i = 0; i < array.length; i++) {\n          newArray.push(\n            <div\n              style={{\n                display: \"inline-block\",\n                margin: `${200 / array.length}px`,\n                backgroundColor: this.props.colorArray[i],\n                height: `${array[i]}px`,\n                width: `${600 / array.length}px`,\n                borderRadius: \"3px\",\n              }}\n            ></div>\n          )\n        }\n        return newArray\n\n      case \"gradient\":\n        return array.map((number) => (\n          <div\n            style={{\n              display: \"inline-block\",\n              backgroundColor: `rgba(3,25,38,${number / 400.0})`,\n              height: `400px`,\n              width: `${1000 / array.length}px`,\n              marginTop: \"75px\",\n              borderRadius: \"3px\",\n            }}\n          ></div>\n        ))\n      default:\n        return console.log(\"hello\")\n    }\n  }\n\n  render() {\n    return (\n      <>\n        {\n          this.props.method === \"radix\"\n            ? <div className=\"container\">\n              <div >\n                <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"bottom\" }}>\n                  {this.arrayBars(this.props.randomArray)}\n                </div>\n                <br />\n                <div className=\"row\">\n                  <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"bottom\" }}>\n                    {this.radixBars(this.props)}\n                  </div>\n                </div>\n              </div>\n            </div>\n            : <div className=\"container\">\n              <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"bottom\" }}>\n                {this.arrayBars(this.props.randomArray)}\n              </div>\n            </div>\n        }\n      </>\n\n    )\n  }\n} //Body\n\nfunction msp(state) {\n  return {\n    randomArray: state.randomArray,\n    sorted: state.sorted,\n    sortedArray: state.sortedArray,\n    style: state.style,\n    arrayColor: state.arrayColor,\n    colorArray: state.colorArray,\n    method: state.method,\n    bucketsArray: state.bucketsArray\n  }\n}\n\nexport default connect(msp)(Body)\n","import React from \"react\"\nimport Body from \"../Components/Body\"\n\nclass BodyContainer extends React.Component {\n  render() {\n    return (\n      <div>\n        <Body />\n      </div>\n    )\n  }\n}\n\nexport default BodyContainer\n","import React from \"react\"\n\nclass Card extends React.Component {\n  render() {\n    return (\n      <>\n        <div className=\"col s4\">\n          <div class=\"card hoverable medium\">\n            <div class=\"card-image waves-effect waves-block waves-light\">\n              <img\n                class=\"activator\"\n                // src=\"../../public/images/bubblesortgif.gif\"\n              />\n              <img class=\"activator\" src={this.props.cardObj.coverImage} />\n            </div>\n            <div class=\"card-content\">\n              <span class=\"card-title activator grey-text text-darken-4\">\n                {this.props.cardObj.name}\n              </span>\n            </div>\n            <div class=\"card-reveal\">\n              <span class=\"card-title grey-text text-darken-4\">\n                {this.props.cardObj.name}\n                <i class=\"material-icons right\">close</i>\n              </span>\n              <p>{this.props.cardObj.description}</p>\n              <img src={this.props.cardObj.chartImage} />\n            </div>\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default Card\n","export default __webpack_public_path__ + \"static/media/bubblesortchart.89bc0893.png\";","export default __webpack_public_path__ + \"static/media/bubblesortgif.1a035f77.gif\";","export default __webpack_public_path__ + \"static/media/heapsortchart.558f36f6.png\";","export default __webpack_public_path__ + \"static/media/heapsortgif.161d8295.gif\";","export default __webpack_public_path__ + \"static/media/insertionsortchart.12bb378e.png\";","export default __webpack_public_path__ + \"static/media/insertionsortgif.0644989a.gif\";","export default __webpack_public_path__ + \"static/media/mergesortchart.dfb7b81d.png\";","export default __webpack_public_path__ + \"static/media/mergesortgif.274044dc.gif\";","export default __webpack_public_path__ + \"static/media/quicksortchart.d24f6a02.png\";","export default __webpack_public_path__ + \"static/media/quicksortgif.1f34ac91.gif\";","export default __webpack_public_path__ + \"static/media/radixsortchart.aeef7be6.png\";","export default __webpack_public_path__ + \"static/media/radixsortimg.2cd2e4de.jpeg\";","export default __webpack_public_path__ + \"static/media/selectionsortchart.3d3b3633.png\";","export default __webpack_public_path__ + \"static/media/selectionsortgif.2d424ac2.gif\";","export default __webpack_public_path__ + \"static/media/spacetimecomplexity.b60eced8.png\";","import React from \"react\"\nimport Card from \"../Components/Card\"\nimport bubbleChart from \"../images/bubblesortchart.png\"\nimport bubbleSort from \"../images/bubblesortgif.gif\"\nimport heapChart from \"../images/heapsortchart.png\"\nimport heapSort from \"../images/heapsortgif.gif\"\nimport insertionChart from \"../images/insertionsortchart.png\"\nimport insertionSort from \"../images/insertionsortgif.gif\"\nimport mergeChart from \"../images/mergesortchart.png\"\nimport mergeSort from \"../images/mergesortgif.gif\"\nimport quickChart from \"../images/quicksortchart.png\"\nimport quickSort from \"../images/quicksortgif.gif\"\nimport radixChart from \"../images/radixsortchart.png\"\nimport radixSort from \"../images/radixsortimg.jpeg\"\nimport selectionChart from \"../images/selectionsortchart.png\"\nimport selectionSort from \"../images/selectionsortgif.gif\"\nimport spaceTimeComplexityGraph from \"../images/spacetimecomplexity.png\"\n\nclass InfoPageContainer extends React.Component {\n  cardObjects = () => {\n    return [\n      {\n        id: 1,\n        name: \"Bubble Sort\",\n        coverImage: bubbleSort,\n        description:\n          \"Bubble Sort is the simplest sorting algorithm that works by creating a loop that compares each item in the array with another item and repeatedly swapping the adjacent elements if they are in wrong order. This process is repeated until the entire array is sorted.\",\n        chartImage: bubbleChart,\n      },\n      {\n        id: 2,\n        name: \"Insertion Sort\",\n        coverImage: insertionSort,\n        description:\n          \"Insertion sort is a simple sorting algorithm that works similar to the way you sort playing cards in your hands. The array is virtually split into a sorted and an unsorted part. Values from the unsorted part are picked and placed at the correct position in the sorted part. The algorithm's name comes from the process of picking an element and inserting it in its correct place and then repeating it for all elements. It works by assuming the first element in the array is already sorted. It then selects the next element and compares this to all elements in the array. Every element that is greater than the selected element is shifted, and the selected element is inserted. This process is repeated until the array is sorted.\",\n        chartImage: insertionChart,\n      },\n      {\n        id: 3,\n        name: \"Selection Sort\",\n        coverImage: selectionSort,\n        description:\n          \"The selection sort algorithm sorts an array by repeatedly finding the minimum element from an unsorted portion of an array and putting it at the beginning. It does this by assuming the first element in the array is the smallest one and looping through to compare that value to every other value in the array. If it ever reaches a value smaller than itself, that element is set as the new smallest value and their positions in the array are swapped. The process continues doing comparisons until it reaches the end. The loops starts all over again moving on to the second element in the array as the smallest one. This continues until the entire array is sorted.\",\n        chartImage: selectionChart,\n      },\n      {\n        id: 4,\n        name: \"Quick Sort\",\n        coverImage: quickSort,\n        description:\n          \"Quick sort is one of the most efficient ways of sorting elements in computer systems. It is known as a divide and conquer algorithm. The term 'divide and conquer' means we divide one large problem into several smaller problems and solve the smaller problems to ultimately solve the large problem.  In quick sort, we find a pivot point in the array to compare all other elements in the array. A pivot can be selected in different ways, as the first, last, random, or median element. If an element is smaller than the pivot, it is moved before the pivot. If an element is greater than the pivot, it is moved after the pivot. This is done simultaneously from both ends of the array, with a left pointer (first element) and right pointer (last element), incrementing toward each other and swapping values should they be on the wrong side. Once this is complete, the process continues recursively on the sub arrays, created by dividing the array in half, or partitioning, until the entire array is sorted.\",\n        chartImage: quickChart,\n      },\n      {\n        id: 5,\n        name: \"Heap Sort\",\n        coverImage: heapSort,\n        description:\n          \"Heap sorting is a way of sorting elements by using the 'Heap' data structure. The is actually quite similar to the selection sort technique. In order to understand heap sort, you must first understand what heaps are and how they are defined. Basically, a heap is a binary tree with some added rules. The added rules are that, first, the binary tree must be complete. This means that you have to fill all the nodes at one level before adding another one. Secondly, there must be a defined parent/child relationship with the element values of the heap. In a min heap, the value of the parent must be smaller than its children. In a max heap, the value of the parent must be greater than its children. In heap sort, we build a max heap that makes sure the highest value element is at the top. That top element is then swapped with the last element of the heap. The top element is removed and stored on a sorted array. This process is repeated until only one element remains in the heap. One important point is that heaps are not natively supported in JavaScript, therefore we implement heaps using arrays. Although heap sort is complex, its space complexity is excellent.\",\n        chartImage: heapChart,\n      },\n      {\n        id: 6,\n        name: \"Merge Sort\",\n        coverImage: mergeSort,\n        description:\n          \"Merge sort is also a divide and conquer algorithm. It divides the input array into two halves, calls itself recursively on the two halves, and then merges the two sorted halves. In merge sort we divide the array into n arrays until each of the arrays contain only one element. The smaller arrays are merged in order to produce a new array. This is repeated until there is only one array remaining, the original array in its sorted state.\",\n        chartImage: mergeChart,\n      },\n      {\n        id: 7,\n        name: \"Radix Sort\",\n        coverImage: radixSort,\n        description:\n          \"The best time complexity for comparison based sorting algorithms (all of the algorithms we have discussed thus far) is O(nlogn). So how do we do better?  Radix sort is the answer. Radix sort is a non-comparison based sorting algorithm. The radix sort algorithm distributes integers into buckets based on a number's significant digit or value (the radix) to avoid the comparison. The idea of Radix Sort is to do digit by digit sort starting from least significant digit to most significant digit. In other words, the ones place digits are sorted in into buckets first, then the tens place, then the hundreds place, and so on. Radix sort uses another sorting method called counting sort as a subroutine to complete its sort.\",\n        chartImage: radixChart,\n      },\n      {\n        id: 8,\n        name: \"Time Complexity\",\n        coverImage: spaceTimeComplexityGraph,\n        description:\n          \"Time complexity is computational representation that describes the amount of time it takes to run an algorithm to completion. Since an algorithm’s running time may vary among different inputs of the same size, we need to consider worst case time complexity, or the maximum amount of time required for inputs of a given size.  Like space complexity, time complexity is also affected by factors such as the operating system and hardware, that is completely independent of the algorithm itself.  Time complexity is commonly estimated by counting the number of elementary operations performed by the algorithm, supposing that each elementary operation takes a fixed amount of time to perform. Therefore, the amount of time taken and the number of elementary operations performed by the algorithm are assumed to differ by at most a constant factor, and the algorithm that performs a task in the smallest number of operations is considered the most efficient one.  As with space complexity, time complexity is also usually represented with big O notation, considering the worst-case scenario. What you create takes up time, and we need to be prepared for the worst!\",\n        chartImage: \"\",\n      },\n      {\n        id: 9,\n        name: \"Space Complexity\",\n        coverImage: spaceTimeComplexityGraph,\n        description:\n          \"Space complexity is used to evaluate the use of memory, or data storage. Algorithms require the use of memory to store program instructions, execute (i.e. function calls) and store data. While these are all contributing factors, the stored variable data is often the primary consideration.  Space complexity is equal to the sum of two components: First, a fixed amount of space that is required to store certain data such as variables, constants, program size, etc. and is not dependent on the size of the problem. Second, a variable amount of space that is required by variables and is totally dependent on the size of the problem (i.e. recursion stack space and dynamic memory allocation).  Space complexity is usually represented with big O notation, which considers the worst-case scenario. What you create takes up space, and we need to be prepared for the worst!\",\n        chartImage: \"\",\n      },\n    ]\n  }\n  arrayOfCards = () => {\n    return this.cardObjects().map((card) => {\n      return <Card key={card.id} cardObj={card} />\n    })\n  }\n  render() {\n    return <div className=\"row\">{this.arrayOfCards()}</div>\n  }\n}\n\nexport default InfoPageContainer\n","import { Route, Switch } from \"react-router-dom\"\nimport \"./App.css\"\nimport NavBar from \"./Components/NavBar\"\nimport BodyContainer from \"./Containers/BodyContainer\"\nimport InfoPageContainer from \"./Containers/InfoPageContainer\"\n\nfunction App() {\n  return (\n    <>\n      <NavBar />\n      <br></br>\n      <Switch>\n        <Route path=\"/sorting-visualizer/info\" component={InfoPageContainer} />\n        <Route path=\"/sorting-visualizer\" component={BodyContainer} />\n      </Switch>\n    </>\n  )\n}\n\nexport default App\n","import { combineReducers } from \"redux\"\nimport {\n  SORTED_COLOR,\n  INITIAL_COLOR,\n  LIGHT_CYAN,\n  TEA_GREEN,\n  MIDDLE_GREEN_YELLOW\n} from '../HelperFunctions/colors'\n\nimport {\n  BUCKETS,\n  CHANGE_BAR_COLOR,\n  CHANGE_BAR_HEIGHT,\n  CLEAR_BUCKET,\n  FINISHED_SORTING,\n  IS_SORTING,\n  METHOD,\n  OFF_INFO,\n  ON_INFO,\n  SET_COLOR_ARRAY,\n  SET_RANDOM_ARRAY,\n  SORTED_ARRAY,\n  SPEED,\n  STYLE,\n} from \"./actionTypes\"\n\nconst defaultState = {\n  randomArray: [],\n  sortedArray: [],\n  colorArray: [],\n  bucketsArray: [[], [], [], [], [], [], [], [], [], []],\n  bucketsColor: [],\n  arrayLength: 100,\n  isSorting: false,\n  style: \"bars\",\n  arrayColor: INITIAL_COLOR,\n  method: null,\n  speed: 50,\n  onInfo: false,\n}\n\nfunction randomArrayReducer(prevState = defaultState.randomArray, action) {\n  switch (action.type) {\n    case SET_RANDOM_ARRAY:\n      return action.payload\n    case CHANGE_BAR_HEIGHT:\n      let newArr = [...prevState]\n      newArr[action.index] = action.newHeight\n      return newArr\n    default:\n      return prevState\n  }\n}\n\nfunction colorArrayReducer(prevState = defaultState.colorArray, action) {\n  switch (action.type) {\n    case SET_COLOR_ARRAY:\n      return action.payload\n    case CHANGE_BAR_COLOR:\n      let newArray = [...prevState]\n      newArray[action.index] = action.newColor\n      return newArray\n    default:\n      return prevState\n  }\n}\n\nfunction sortedArrayReducer(prevState = defaultState.sortedArray, action) {\n  switch (action.type) {\n    case SORTED_ARRAY:\n      return action.payload\n    default:\n      return prevState\n  }\n}\n\nfunction changeSortedReducer(prevState = defaultState.isSorting, action) {\n  switch (action.type) {\n    case IS_SORTING:\n      return action.payload\n    case FINISHED_SORTING:\n      return action.payload\n    default:\n      return prevState\n  }\n}\n\nfunction changeStyleReducer(prevState = defaultState.style, action) {\n  switch (action.type) {\n    case STYLE:\n      return action.payload\n    default:\n      return prevState\n  }\n}\n\nfunction changeMethodReducer(prevState = defaultState.method, action) {\n  switch (action.type) {\n    case METHOD:\n      return action.payload\n    default:\n      return prevState\n  }\n}\n\nfunction changeSpeedReducer(prevState = defaultState.speed, action) {\n  switch (action.type) {\n    case SPEED:\n      return action.payload\n    default:\n      return prevState\n  }\n}\nfunction changeOnInfoReducer(prevState = defaultState.onInfo, action) {\n  switch (action.type) {\n    case ON_INFO:\n      return action.payload\n    case OFF_INFO:\n      return action.payload\n    default:\n      return prevState\n  }\n}\n\nfunction changeBucketsReducer(prevState = defaultState.bucketsArray, action) {\n  let newBuckets = [...prevState]\n  switch (action.type) {\n    case BUCKETS:\n      newBuckets[action.bucket].push(action.height)\n      return newBuckets\n    case CLEAR_BUCKET:\n      let item = newBuckets[action.bucket].shift()\n      return newBuckets\n    default:\n      return prevState\n  }\n}\n\nconst rootReducer = combineReducers({\n  randomArray: randomArrayReducer,\n  sortedArray: sortedArrayReducer,\n  isSorting: changeSortedReducer,\n  style: changeStyleReducer,\n  colorArray: colorArrayReducer,\n  method: changeMethodReducer,\n  speed: changeSpeedReducer,\n  bucketsArray: changeBucketsReducer,\n  onInfo: changeOnInfoReducer,\n})\n\nexport default rootReducer\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport { BrowserRouter } from \"react-router-dom\"\nimport { createStore } from \"redux\"\nimport App from \"./App\"\nimport \"./index.css\"\nimport rootReducer from \"./Redux/rootReducer\"\n\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n)"],"sourceRoot":""}